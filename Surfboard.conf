#!MANAGED-CONFIG https://cdn.jsdelivr.net/gh/zuluion/Surfboard-Template-Config@master/Surfboard-Template-Config.conf interval=60 strict=true # subscribe profile url and auto update config
[General]
# Specify dns server used by application
dns-server = 223.5.5.5, 1.1.1.1, 8.8.8.8,system

# Specify doh server used by application
doh-server = https://doh.pub/dns-query,https://dns.alidns.com/dns-query,https://9.9.9.9/dns-query

# Specify route rule and domain rule, matching traffic will not be redirected or rejected.
skip-proxy = 127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, 100.64.0.0/10, 17.0.0.0/8, localhost, *.crashlytics.com, *.local,captive.apple.com, www.baidu.com //444

# Test url used by url-test and manually node speed test. Redirect proxy will use this url.
proxy-test-url = http://cp.cloudflare.com

# Test url used by url-test and manually node speed test. Direct proxy will use this url.
internet-test-url = http://cp.cloudflare.com

# Timeout for all connectivity test
test-timeout = 30

# Match domain won't get fake ip dns response
always-real-ip = *.lan,*.localdomain,*.example,*.invalid,*.localhost,*.test,*.local,*.home.arpa,time.*.com,time.*.gov,time.*.edu.cn,time.*.apple.com,time1.*.com,time2.*.com,time3.*.com,time4.*.com,time5.*.com,time6.*.com,time7.*.com,ntp.*.com,ntp1.*.com,ntp2.*.com,ntp3.*.com,ntp4.*.com,ntp5.*.com,ntp6.*.com,ntp7.*.com,*.time.edu.cn,*.ntp.org.cn,+.pool.ntp.org,time1.cloud.tencent.com,music.163.com,*.music.163.com,*.126.net,musicapi.taihe.com,music.taihe.com,songsearch.kugou.com,trackercdn.kugou.com,*.kuwo.cn,api-jooxtt.sanook.com,api.joox.com,joox.com,y.qq.com,*.y.qq.com,streamoc.music.tc.qq.com,mobileoc.music.tc.qq.com,isure.stream.qqmusic.qq.com,dl.stream.qqmusic.qq.com,aqqmusic.tc.qq.com,amobile.music.tc.qq.com,*.xiami.com,*.music.migu.cn,music.migu.cn,*.msftconnecttest.com,*.msftncsi.com,msftconnecttest.com,msftncsi.com,localhost.ptlogin2.qq.com,localhost.sec.qq.com,+.srv.nintendo.net,+.stun.playstation.net,xbox.*.microsoft.com,*.*.xboxlive.com,+.battlenet.com.cn,+.wotgame.cn,+.wggames.cn,+.wowsgame.cn,+.wargaming.net,proxy.golang.org,stun.*.*,stun.*.*.*,+.stun.*.*,+.stun.*.*.*,+.stun.*.*.*.*,heartbeat.belkin.com,*.linksys.com,*.linksyssmartwifi.com,*.router.asus.com,mesu.apple.com,swscan.apple.com,swquery.apple.com,swdownload.apple.com,swcdn.apple.com,swdist.apple.com,lens.l.google.com,stun.l.google.com,+.nflxvideo.net,*.square-enix.com,*.finalfantasyxiv.com,*.ffxiv.com,*.mcdn.bilivideo.cn

# Establish a http proxy server on your device and provide proxy service in specified ip
http-listen = 0.0.0.0:1234

# Establish a socks5 proxy server on your device and provide proxy service in specified ip
socks5-listen = 127.0.0.1:1235

# If proxy not support udp relay, use DIRECT or REJECT instead
udp-policy-not-supported-behaviour = DIRECT

[Host]

localhost = 127.0.0.1

# map 'abc.com' to '1.2.3.4'
# abc.com = 1.2.3.4

# map any domain end with '.dev' to '6.7.8.9'
# *.dev = 6.7.8.9

# alias 'bar.com' dns query result to 'foo.com'
# foo.com = bar.com

# assign '8.8.8.8' as dns server for 'bar.com'
# bar.com = server:8.8.8.8

[Proxy]
# build in policy
# On = direct
# Off = reject

# http proxy
# ProxyHTTP = http, 1.2.3.4, 443, username, password

# https proxy
# ProxyHTTPS = https, 1.2.3.4, 443, username, password, skip-cert-verify=true, sni=www.google.com

# socks5 proxy
# ProxySOCKS5 = socks5, 1.2.3.4, 443, username, password, udp-relay=false

# socks5 over tls proxy
# ProxySOCKS5TLS = socks5-tls, 1.2.3.4, 443, username, password, skip-cert-verify=true, sni=www.google.com

# shadowsocks proxy, simple-obfs supported
# ProxySS = ss, 1.2.3.4, 8000, encrypt-method=chacha20-ietf-poly1305, password=abcd1234, udp-relay=false, obfs=http, obfs-host=www.google.com, obfs-uri=/

# vmess proxy, tls and websocket supported, pure tcp is not supported
# ProxyVMess = vmess, 1.2.3.4, 8000, username=0233d11c-15a4-47d3-ade3-48ffca0ce119, udp-relay=false, ws=true, tls=true, ws-path=/v2, ws-headers=X-Header-1:value|X-Header-2:value, skip-cert-verify=true, sni=www.google.com, vmess-aead=true

# trojan proxy, trojan grpc is not supported
# ProxyTrojan = trojan, 192.168.20.6, 443, password=password1, udp-relay=false, skip-cert-verify=true, sni=www.google.com

# wireguard proxy
# ProxyWireguard = wireguard, section-name = HomeServer

# [WireGuard HomeServer]
# private-key = sDEZLACT3zgNCS0CyClgcBC2eYROqYrwLT4wdtAJj3s=
# self-ip = 10.0.2.2
# dns-server = 8.8.8.8
# mtu = 1280
# peer = (public-key = fWO8XS9/nwUQcqnkfBpKeqIqbzclQ6EKP20Pgvzwclg=, allowed-ips = 0.0.0.0/0, endpoint = 192.168.20.6:51820)

# {group name} = select, {proxies, ...}, {policy-path}, {policy-regex-filter}, hidden = {hidden}, include-all-proxies = {include-all-proxies}, include-other-group = "{include-other-group}"

[Proxy Group]
# proxy group whose selected proxy can be changed manually
# SelectGroup = select, ProxyHTTP, ProxyHTTPS, DIRECT, REJECT

# proxy group whose selected proxy can be decided based on url test result automatically
# AutoTestGroup = url-test, ProxySOCKS5, ProxySOCKS5TLS, url=http://www.gstatic.com/generate_204, interval=600, tolerance=100, timeout=5, hidden=true

# proxy group with a external proxies list url
SSP = url-test, policy-path=https://sspinet-zaeoxnowmv.cn-shanghai.fcapp.run/api/v1/client/subscribe?token=26a6ce5b21c8b5a9db301f566f1a6b33, interval=300, policy-regex-filter=^((?!剩余|官|重置|到期|告|续费).)*$ 

FacMata = url-test, policy-path=https://neo.facal.one/api/v1/client/subscribe?token=85d61f1ec61669786281fc2cadcd4afc, interval=300, policy-regex-filter=^((?!剩余|官|重置|到期|告|续费).)*$

# 集合 = url-test, policy-path=https://sspinet-zaeoxnowmv.cn-shanghai.fcapp.run/api/v1/client/subscribe?token=26a6ce5b21c8b5a9db301f566f1a6b33, policy-path=https://neo.facal.one/api/v1/client/subscribe?token=85d61f1ec61669786281fc2cadcd4afc, interval=300, policy-regex-filter=^((?!剩余|官|重置|到期|告|续费).)*$

🇭🇰 香港节点 = url-test, include-other-group=SSP, include-other-group=FacMata, policy-regex-filter=香港|HK|Hong Kong, interval=600, tolerance=80

# 🇭🇰香港 = url-test, policy-path=SSP, FacMata, interval=300, policy-regex-filter=(?i)(香港|HKG)

# 🇺🇸美国 = url-test, policy-path=SSP, FacMata, interval=300, policy-regex-filter=(?i)(美国|USA)

# 🇯🇵日本 = url-test, policy-path=SSP, FacMata, interval=300, policy-regex-filter=(?i)(日本|JP)

🚀直接连接 = select,DIRECT

# AutoExternalGroup = url-test, policy-path=https://test.com/nodes.txt

# proxy group which contains all proxy under [Proxy] section
# AllProxies = select, include-all-proxies = true

# proxy group which contains all proxy from other group by name
# IncludeOtherGroup = select, include-other-group = "SelectGroup, ExternalGroup", policy-regex-filter=Proxy.*

# proxy group whose selection is chosen randomly
# LoadBalanceGroup = load-balance, ProxyHTTP, ProxyHTTPS

# proxy group just like url-test but follow 'first come first served' rule
# FallbackGroup = fallback, ProxySOCKS5, ProxySOCKS5TLS, url=http://www.gstatic.com/generate_204, interval=600, timeout=5

# Multi-Strategy Group Combination
# Local-Proxy = fallback, include-other-group = "Local", policy-regex-filter=192.168.1.1|192.168.31.1, url=http://www.gstatic.com/generate_204, interval=6, timeout=5
# 🔰国外流量-AUTO = url-test, Local-Proxy, 🔰国外流量-BASE, url=http://www.gstatic.com/generate_204, interval=30, tolerance=100, timeout=5
# ⚓️其他流量-AUTO = url-test, Local-Proxy, ⚓️其他流量-BASE, url=http://www.gstatic.com/generate_204, interval=30, tolerance=100, timeout=5
# 🔰国外流量 = select, 🔰国外流量-AUTO,🔰国外流量-BASE,Local-Proxy
# ⚓️其他流量 = select, ⚓️其他流量-AUTO,⚓️其他流量-BASE,Local-Proxy


# AIRPORT = select, policy-path=https://yournodes.com/proxy-nodes.txt
# 🇭🇰 AIRPORT-HK = select, include-other-group = "AIRPORT", policy-regex-filter=港|HK|HongKong
# 🇨🇳 AIRPORT-TW = select, include-other-group = "AIRPORT", policy-regex-filter=台湾|TW|Taiwan
# 🇸🇬 AIRPORT-SG = select, include-other-group = "AIRPORT", policy-regex-filter=新加坡|SG|Singapore
# 🇯🇵 AIRPORT-JP = select, include-other-group = "AIRPORT", policy-regex-filter=日本|JP|Japan
# 🇰🇷 AIRPORT-Korea = select, include-other-group = "AIRPORT", policy-regex-filter=韩国|KR|Korean
# 🇺🇸 AIRPORT-US = select, include-other-group = "AIRPORT", policy-regex-filter=美国|US|United States|America
# 🇮🇳 AIRPORT-India = select, include-other-group = "AIRPORT", policy-regex-filter=印度|IN|India
# 🇬🇧 AIRPORT-EN = select, include-other-group = "AIRPORT", policy-regex-filter=英国|UK|Britain|England
# 🇮🇪 AIRPORT-Ireland = select, include-other-group = "AIRPORT", policy-regex-filter=爱尔兰|Ireland
# 🇷🇺 AIRPORT-RU = select, include-other-group = "AIRPORT", policy-regex-filter=俄罗斯|RU|Russia
# 🇨🇦 AIRPORT-Canada = select, include-other-group = "AIRPORT", policy-regex-filter=加拿大|CA|Canada
# 🇫🇷 AIRPORT-FR = select, include-other-group = "AIRPORT", policy-regex-filter=法国|FR|France
# 🇦🇺 AIRPORT-AU = select, include-other-group = "AIRPORT", policy-regex-filter=澳大利亚|AU|Australia
# 🇹🇷 Add-ON-TR = select, include-other-group = "AIRPORT", policy-regex-filter=土耳其|TUR|Turkey
# include-other-group = "AIRPORT"  app version >= v2.22.0
# include-other-group = "🇭🇰 AIRPORT-HK,🇨🇳 AIRPORT-TW,🇸🇬 AIRPORT-SG,🇯🇵 AIRPORT-JP,🇰🇷 AIRPORT-Korea,🇺🇸 AIRPORT-US" some erro
# Special-streaming-media = select, include-other-group = "AIRPORT", policy-regex-filter=港|HK|HongKong|台湾|TW|Taiwan|新加坡|SG|Singapore|日本|JP|Japan|韩国|KR|Korean|美国|US|United States|America
# WARP+ = select, policy-path=https://yournodes.com/warp-nodes.txt, policy-regex-filter=WARP+
# WARP+ = select,REJECT 
# Local =  select, policy-path=https://yournodes.com/local-nodes.txt , policy-regex-filter=WARP+


[Rule]
# domain exact match 'www.apple.com' will be redirected to proxy named 'ProxyHTTP' in [Proxy] section 
# DOMAIN,www.apple.com,ProxyHTTP

# domain exact match 'www.google.com' will be redirected to proxy group named 'SelectGroup' in [Proxy Group] section
# DOMAIN,www.google.com,SelectGroup

# domain ends with 'apple.com' will be redirected to 'Proxy', DNS query of this domain will triggered in the remote proxy
# DOMAIN-SUFFIX,apple.com,Proxy,force-remote-dns

# domain contains 'google' keyword will be redirected to 'Proxy', a fake ip will be returned in DNS query
# DOMAIN-KEYWORD,google,Proxy,enhanced-mode

# destination ip match route '192.168.0.0/16' will be sent directly
# IP-CIDR,192.168.0.0/16,DIRECT

# destination ip located in United State will be rejected
# GEOIP,US,REJECT

# traffic sent by application whose package name is 'com.android.vending' will be sent to 'Proxy'
# PROCESS-NAME,com.android.vending,Proxy  # android package name
# PROCESS-NAME,*google*,Proxy             # android package name wildcard rule

# traffic match external rules defined in 'https://ruleset.com/cn' will be sent to 'ProxyVMess'
# RULE-SET,https://ruleset.com/cn,ProxyVMess

# traffic match external domain rules defined in 'https://domainset.com/ad' will be rejected'
# DOMAIN-SET,https://domainset.com/ad,REJECT

# traffic sent using wifi whose ssid name is 'CMCC' will be rejected
# SUBNET,SSID:CMCC,REJECT

# traffic sent using wifi whose bssid is 'F4-98-A0-73-3A-5B' will be sent directly
# SUBNET,BSSID:F4-98-A0-73-3A-5B,DIRECT

# traffic sent through a router whose ip is '192.168.1.1' will be sent directly
# SUBNET,ROUTER:192.168.1.1,DIRECT

# traffic sent using wifi will be sent directly
# SUBNET,TYPE:WIFI,DIRECT

# traffic sent using wired network will be sent directly
# SUBNET,TYPE:WIRED,DIRECT

# traffic sent using mobile network will be sent through 'SelectGroup'
# SUBNET,TYPE:CELLULAR,SelectGroup

# traffic sent using mobile network whose MCC is 100 and MNC is 200, will be sent directly
# SUBNET,MCCMNC:100-200,DIRECT

# traffic doesn't match rules above will be sent to 'ProxyTrojan'
# FINAL,ProxyTrojan

DOMAIN-SUFFIX,smtp,DIRECT
DOMAIN-KEYWORD,aria2,DIRECT
DOMAIN,clash.razord.top,DIRECT
DOMAIN-SUFFIX,lancache.steamcontent.com,DIRECT

# DOMAIN-SUFFIX,live.cn,🚀直接连接



GEOIP,CN,DIRECT
FINAL,DIRECT


[Panel]
PanelA = title="Panel Title", content="Panel Content\nSecondLine", style=info
a